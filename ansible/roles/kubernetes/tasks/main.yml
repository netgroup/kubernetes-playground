---
- name: Disable swap
  ansible.builtin.command: swapoff -a
  when: ansible_swaptotal_mb != 0

- name: Disable automounting swap partitions
  ansible.posix.mount:
    fstype: swap
    name: none
    state: absent

- name: Run Kubernetes preflight checks
  ansible.builtin.include_tasks: preflight-checks.yml

- name: Load OS specific variables
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - files:
        - "{{ ansible_distribution }}-{{ ansible_distribution_version|lower|replace('/', '_') }}.yml"
        - "{{ ansible_distribution }}-{{ ansible_distribution_release }}.yml"
        - "{{ ansible_distribution }}-{{ ansible_distribution_major_version|lower|replace('/', '_') }}.yml"
        - "{{ ansible_distribution }}.yml"
        - "{{ ansible_os_family|lower }}.yml"
        - defaults.yml
      paths:
        - ../vars

- name: Print debug information
  changed_when: false
  vars:
    msg: |
        Ansible distribution: {{ ansible_distribution }}
        Ansible distribution release: {{ ansible_distribution_release }}
        Ansible distribution version: {{ ansible_distribution_version }}
        Ansible domain: {{ ansible_domain }}
        Ansible FQDN: {{ ansible_fqdn }}
        Ansible hostname: {{ ansible_hostname }}
        Ansible OS family: {{ ansible_os_family }}
        Ansible kernel: {{ ansible_kernel }}
        Assigned hosname: {{ assigned_hostname }}
        Base box: {{ base_box }}
        Inventory hostname: {{ inventory_hostname }}
        Kubelet service state: {{ kubelet_service_state }}
  ansible.builtin.debug:
    msg: "{{ msg.split('\n') }}"

- name: Setup Debian
  ansible.builtin.include_tasks: setup-Debian.yml
  when: ansible_os_family == "Debian"

- name: Ensure that OS-specific handlers run before carrying on
  ansible.builtin.meta: flush_handlers

- name: Install Kubernetes packages
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  with_items:
    - kubelet
    - kubeadm
    - kubectl

- name: Configure forwarding and bridging for IPv6 and IPv4
  ansible.posix.sysctl:
    name: "{{ item }}"
    value: "1"
    state: present
    sysctl_set: true
  with_items:
    - net.bridge.bridge-nf-call-iptables
    - net.bridge.bridge-nf-call-ip6tables
    - net.ipv4.ip_forward

- name: Enable kubelet service
  ansible.builtin.service:
    name: kubelet
    enabled: true
    state: "{{ kubelet_service_state | default('started') }}"

- name: Ensure containerd is started and enabled at boot.
  service:
    name: containerd
    state: started
    enabled: true

- name: Ensure containerd config directory exists.
  file:
    path: /etc/containerd
    state: directory
  register: containerd_dir

- name: Get defaults from containerd.
  command: containerd config default
  changed_when: false
  register: containerd_config_default

- name: Prepare containerd/config.toml from default config
  copy:
    dest: /tmp/containerd_config.toml
    content: "{{ containerd_config_default.stdout }}"

- name: Set Cgroup driver to systemd
  lineinfile:
    insertafter: '.*\[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options\]$'
    line: '          SystemdCgroup = true'
    state: present
    path: /tmp/containerd_config.toml
  when: containerd_config_cgroup_driver_systemd

- name: Make sure SystemdCgroup = false is not set
  ansible.builtin.lineinfile:
    path: /tmp/containerd_config.toml
    state: absent
    line: '            SystemdCgroup = false'
  notify: restart containerd
  when: containerd_config_cgroup_driver_systemd

- name: Copy config.toml to /etc/containerd
  copy:
    remote_src: true
    src: /tmp/containerd_config.toml
    dest: /etc/containerd/config.toml
  notify: restart containerd

- name: Ensure containerd is restarted immediately if necessary.
  meta: flush_handlers
...
